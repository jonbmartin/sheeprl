# @package _global_

defaults:
  - override /algo: dreamer_v3_L # JBM changed to XXS from S
  #- override /env: atari
  - override /model_manager: dreamer_v3
  - _self_

# Algorithm
algo:
  replay_ratio: 1
  total_steps: 5000000
  per_rank_batch_size: 16
  per_rank_sequence_length: 64
  learning_starts: 2048 # JBM changed from 1024
  #cnn_keys:
  #  encoder: [rgb]
  #  decoder: [rgb]
  mlp_keys:
    encoder: 
      - pulse
      - time
    decoder: 
      - pulse
      - time
# Checkpoint
checkpoint:
  every: 25000
  #resume_from: './logs/runs/dreamer_v3//TNMRGradEnv/2024-07-01_23-37-09_dreamer_v3_TNMRGradEnv_42/version_0/checkpoint/ckpt_1400000_0.ckpt'

# Buffer
buffer:
  size: 1000000
  checkpoint: True

# Distribution
distribution:
  type: "auto"

metric:
  aggregator:
    metrics:
      Loss/world_model_loss:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Loss/value_loss:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Loss/policy_loss:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Loss/observation_loss:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Loss/reward_loss:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Loss/state_loss:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Loss/continue_loss:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      State/kl:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      State/post_entropy:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      State/prior_entropy:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Grads/world_model:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Grads/actor:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Grads/critic:
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
